{"version":3,"file":"static/js/380.4c16b1d2.chunk.js","mappings":"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","sources":["pages/SensorPage.js"],"sourcesContent":["/* global Accelerometer, GravitySensor, Gyroscope, AbsoluteOrientationSensor */\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n} from \"recharts\";\r\n\r\nconst getColors = (mode) => ({\r\n  x: mode === \"dark\" ? \"#8884d8\" : \"#0000ff\",\r\n  y: mode === \"dark\" ? \"#82ca9d\" : \"#008000\",\r\n  z: mode === \"dark\" ? \"#ffc658\" : \"#ffcc00\",\r\n  w: mode === \"dark\" ? \"#f54242\" : \"#ff0000\",\r\n  pitch: mode === \"dark\" ? \"#8884d8\" : \"#0000ff\",\r\n  roll: mode === \"dark\" ? \"#82ca9d\" : \"#008000\",\r\n  yaw: mode === \"dark\" ? \"#ffc658\" : \"#ffcc00\",\r\n  compass: mode === \"dark\" ? \"#8884d8\" : \"#0000ff\",\r\n});\r\n\r\nconst useSensors = () => {\r\n  const [sensorData, setSensorData] = useState({\r\n    accelerometer: { data: {}, max: {}, min: {} },\r\n    gravity: { data: {}, max: {}, min: {} },\r\n    compass: { data: {}, max: {}, min: {} },\r\n    gyroscope: { data: {}, max: {}, min: {} },\r\n    inclinometer: { data: {}, max: {}, min: {} },\r\n    orientation: { data: {}, max: {}, min: {} },\r\n  });\r\n  const [chartData, setChartData] = useState({\r\n    accelerometer: [],\r\n    gravity: [],\r\n    compass: [],\r\n    gyroscope: [],\r\n    inclinometer: [],\r\n    orientation: [],\r\n  });\r\n  const [error, setError] = useState(null);\r\n\r\n  const updateMaxMin = useCallback((sensorType, newData) => {\r\n    setSensorData((prevData) => {\r\n      const updated = { ...prevData[sensorType] };\r\n      Object.keys(newData).forEach((key) => {\r\n        updated.max[key] = Math.max(\r\n          prevData[sensorType].max[key] || -Infinity,\r\n          newData[key]\r\n        );\r\n        updated.min[key] = Math.min(\r\n          prevData[sensorType].min[key] || Infinity,\r\n          newData[key]\r\n        );\r\n      });\r\n      updated.data = newData;\r\n      return { ...prevData, [sensorType]: updated };\r\n    });\r\n  }, []);\r\n\r\n  const addToChartData = useCallback((sensorType, newData) => {\r\n    setChartData((currentData) => {\r\n      const newDataPoint = { ...newData, timestamp: new Date().getTime() };\r\n      const updatedData = [...currentData[sensorType], newDataPoint];\r\n      const maxLength = 100;\r\n      const dataToDisplay =\r\n        updatedData.length > maxLength\r\n          ? updatedData.slice(-maxLength)\r\n          : updatedData;\r\n      return { ...currentData, [sensorType]: dataToDisplay };\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const sensorsCleanup = [];\r\n\r\n    const handleOrientationEvent = (event) => {\r\n      const { alpha, beta, gamma } = event;\r\n      if (\r\n        typeof alpha === \"number\" &&\r\n        typeof beta === \"number\" &&\r\n        typeof gamma === \"number\"\r\n      ) {\r\n        const compass = 360 - alpha;\r\n        const inclinometerData = { pitch: beta, roll: gamma, yaw: alpha };\r\n        const compassData = { compass };\r\n\r\n        updateMaxMin(\"inclinometer\", inclinometerData);\r\n        addToChartData(\"inclinometer\", inclinometerData);\r\n        updateMaxMin(\"compass\", compassData);\r\n        addToChartData(\"compass\", compassData);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"deviceorientation\", handleOrientationEvent);\r\n    sensorsCleanup.push(() =>\r\n      window.removeEventListener(\"deviceorientation\", handleOrientationEvent)\r\n    );\r\n\r\n    if (\"Accelerometer\" in window) {\r\n      try {\r\n        const accelerometer = new Accelerometer({ frequency: 60 });\r\n        accelerometer.addEventListener(\"reading\", () => {\r\n          const accelerometerData = {\r\n            x: accelerometer.x / 9.8,\r\n            y: accelerometer.y / 9.8,\r\n            z: accelerometer.z / 9.8,\r\n          };\r\n          updateMaxMin(\"accelerometer\", accelerometerData);\r\n          addToChartData(\"accelerometer\", accelerometerData);\r\n        });\r\n        accelerometer.start();\r\n        sensorsCleanup.push(() => accelerometer.stop());\r\n      } catch (err) {\r\n        setError(\"Accelerometer not supported or permission denied\");\r\n      }\r\n    }\r\n\r\n    if (\"GravitySensor\" in window) {\r\n      try {\r\n        const gravity = new GravitySensor({ frequency: 60 });\r\n        gravity.addEventListener(\"reading\", () => {\r\n          const gravityData = {\r\n            x: gravity.x / 9.8,\r\n            y: gravity.y / 9.8,\r\n            z: gravity.z / 9.8,\r\n          };\r\n          updateMaxMin(\"gravity\", gravityData);\r\n          addToChartData(\"gravity\", gravityData);\r\n        });\r\n        gravity.start();\r\n        sensorsCleanup.push(() => gravity.stop());\r\n      } catch (err) {\r\n        setError(\"GravitySensor not supported or permission denied\");\r\n      }\r\n    }\r\n\r\n    if (\"Gyroscope\" in window) {\r\n      try {\r\n        const gyroscope = new Gyroscope({ frequency: 60 });\r\n        gyroscope.addEventListener(\"reading\", () => {\r\n          const gyroscopeData = {\r\n            x: gyroscope.x,\r\n            y: gyroscope.y,\r\n            z: gyroscope.z,\r\n          };\r\n          updateMaxMin(\"gyroscope\", gyroscopeData);\r\n          addToChartData(\"gyroscope\", gyroscopeData);\r\n        });\r\n        gyroscope.start();\r\n        sensorsCleanup.push(() => gyroscope.stop());\r\n      } catch (err) {\r\n        setError(\"Gyroscope not supported or permission denied\");\r\n      }\r\n    }\r\n\r\n    if (\"AbsoluteOrientationSensor\" in window) {\r\n      try {\r\n        const orientation = new AbsoluteOrientationSensor({ frequency: 60 });\r\n        orientation.addEventListener(\"reading\", () => {\r\n          const [x, y, z, w] = orientation.quaternion;\r\n          const orientationData = { x, y, z, w };\r\n          updateMaxMin(\"orientation\", orientationData);\r\n          addToChartData(\"orientation\", orientationData);\r\n        });\r\n        orientation.start();\r\n        sensorsCleanup.push(() => orientation.stop());\r\n      } catch (err) {\r\n        setError(\r\n          \"AbsoluteOrientationSensor not supported or permission denied\"\r\n        );\r\n      }\r\n    }\r\n\r\n    return () => sensorsCleanup.forEach((cleanup) => cleanup());\r\n  }, [updateMaxMin, addToChartData]);\r\n\r\n  return { sensorData, chartData, error };\r\n};\r\n\r\nconst SensorChart = ({ data, colors }) => (\r\n  <Box sx={{ height: 250 }}>\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <LineChart data={data}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"timestamp\" hide={true} />\r\n        <YAxis />\r\n        <Tooltip transitionDuration={0} />\r\n        {Object.keys(data[0] || {})\r\n          .filter((key) => key !== \"timestamp\")\r\n          .map((axis) => (\r\n            <Line\r\n              key={axis}\r\n              type=\"monotone\"\r\n              dataKey={axis}\r\n              stroke={colors[axis]}\r\n              isAnimationActive={false}\r\n              dot={false}\r\n              strokeWidth={3}\r\n            />\r\n          ))}\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  </Box>\r\n);\r\n\r\nconst HeaderSection = ({ error }) => (\r\n  <Grid item xs={12}>\r\n    <Card sx={{ height: 450 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" color=\"error\">\r\n          {error}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  </Grid>\r\n);\r\n\r\nconst SensorSection = ({ sensorData, chartData }) => {\r\n  const theme = useTheme();\r\n  const colors = getColors(theme.palette.mode);\r\n  return (\r\n    <>\r\n      {Object.entries(sensorData).map(([sensorType, { data, max, min }]) => (\r\n        <Grid item xs={12} md={6} lg={4} key={sensorType}>\r\n          <Card sx={{ height: 500, mb: 4 }}>\r\n            <Box sx={{ height: 200, overflow: \"auto\", p: 2 }}>\r\n              <Typography variant=\"h5\" component=\"h2\">\r\n                {sensorType.charAt(0).toUpperCase() + sensorType.slice(1)}\r\n              </Typography>\r\n              {Object.entries(data)\r\n                .filter(([_, value]) => value !== null && value !== undefined)\r\n                .map(([key, value]) => (\r\n                  <Typography key={key} style={{ color: colors[key] }}>\r\n                    {`${key.toUpperCase()}: ${value.toFixed(4)} (Max: ${max[\r\n                      key\r\n                    ]?.toFixed(4)}, Min: ${min[key]?.toFixed(4)})`}\r\n                  </Typography>\r\n                ))}\r\n            </Box>\r\n            <SensorChart data={chartData[sensorType]} colors={colors} />\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst SensorPage = () => {\r\n  const { sensorData, chartData, error } = useSensors();\r\n\r\n  return (\r\n    <Grid container spacing={4} sx={{ py: 4, px: 2 }}>\r\n      {error ? (\r\n        <HeaderSection error={error} />\r\n      ) : (\r\n        <SensorSection sensorData={sensorData} chartData={chartData} />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SensorPage;\r\n"],"names":["SensorChart","_ref","data","colors","_jsx","Box","sx","height","children","ResponsiveContainer","width","_jsxs","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","hide","YAxis","Tooltip","transitionDuration","Object","keys","filter","key","map","axis","Line","type","stroke","isAnimationActive","dot","strokeWidth","HeaderSection","_ref2","error","Grid","item","xs","Card","CardContent","Typography","variant","color","SensorSection","_ref3","sensorData","chartData","theme","useTheme","x","mode","palette","y","z","w","pitch","roll","yaw","compass","_Fragment","entries","_ref4","sensorType","max","min","md","lg","mb","overflow","p","component","charAt","toUpperCase","slice","_ref5","_","value","undefined","_ref6","_max$key","_min$key","style","toFixed","SensorPage","useSensors","setSensorData","useState","accelerometer","gravity","gyroscope","inclinometer","orientation","setChartData","setError","updateMaxMin","useCallback","newData","prevData","updated","forEach","Math","Infinity","addToChartData","currentData","newDataPoint","timestamp","Date","getTime","updatedData","dataToDisplay","length","useEffect","sensorsCleanup","handleOrientationEvent","event","alpha","beta","gamma","inclinometerData","compassData","window","addEventListener","push","removeEventListener","Accelerometer","frequency","accelerometerData","start","stop","err","GravitySensor","gravityData","Gyroscope","gyroscopeData","AbsoluteOrientationSensor","quaternion","orientationData","cleanup","container","spacing","py","px"],"sourceRoot":""}